What are higher order functions?

Did you use any higher order functions in assignment 2? If so, mention one and explain what you used it for and why was that function the right choice for the problem on hand. Refer back to the file and the function from assignment 2 where you use it.

Higher order functions are functions that take other functions in as arguments, return functions as their result, or both. It enables abstraction and reusability by treating functions as first-class citizens, allowing them to be passed and returned like any other value. Higher order functions help maintain immutability and avoid side effects in functional programming by enabling function composition and accumulation without modifying state. For example, map is a higher order function that applies a given function to each element of a collection (such as a list, array, etc.) and returns a new collection/object, preventing mutability.

Yes, we used a higher order function in assignment 2 for Lua within the iterative implementation of the Fibonacci function. The function fun.foldl() is a higher order function that takes in three arguments: (1) a function to apply repeatedly, (2) an initial accumulator value (in this case, the starting Fibonacci series {1,1}, and (3) a list of elements to iterate over (generated by fun.range(2,n)). For our Fibonacci function, foldl allowed us to progressively and iteratively build the Fibonacci sequence by applying the provided function to the elements of our list from left to right, appending the sum of the last two numbers in the current sequence. This iterative process continues for the range 2 to n, generating the entire Fibonacci series. This approach makes the code concise and effectively handles the iteration over the Fibonacci sequence without manually managing loops.

Total[10]: 10

